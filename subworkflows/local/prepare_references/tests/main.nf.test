nextflow_workflow {

    name "Test Workflow PREPARE_REFERENCES"
    script "subworkflows/local/prepare_references/main.nf"
    workflow "PREPARE_REFERENCES"
    config "./nextflow.config"

    test("Should run without failures") {

        when {
            params {
                aligner            = "bwamem2"
                mt_aligner         = "bwa"
                variant_caller     = "deepvariant"
                mito_name          = "MT"
                testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/raredisease/reference/'
                fasta              = params.testdata_base_path + 'reference.fasta'
                fai                = params.testdata_base_path + 'reference.fasta.fai'
                target_bed         = params.testdata_base_path + 'target.bed'
                vep_cache          = params.testdata_base_path + 'vep_cache_and_plugins.tar.gz'

            }
            workflow {
                """
                input[0] = Channel.of(params.fasta).map {it -> [[id:'genome'], it]}.collect()
                input[1] = Channel.of(params.fai).map {it -> [[id:'genome'], it]}.collect()
                input[2] = Channel.empty()
                input[3] = Channel.empty()
                input[4] = Channel.value([[:],[]])
                input[5] = Channel.value([[:],[]])
                input[6] = Channel.of(params.target_bed).map {it -> [[id:'genome'], it]}.collect()
                input[7] = Channel.empty()
                input[8] = Channel.of(params.vep_cache).map {it -> [[id:'genome'], it]}.collect()
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

}
